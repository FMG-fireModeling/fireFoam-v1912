/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1806                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     fireFoam;

//startFrom       latestTime;
startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         120;

deltaT          0.1;

//writeControl    clockTime;
writeControl    adjustableRunTime;

//writeInterval   43000;
//writeInterval   4;
writeInterval   5;

purgeWrite      1000;

writeFormat     ascii;

writePrecision  6;

writeCompression no;

timeFormat      general;

timePrecision   8;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           3;

maxDi           1e6;

maxDeltaT       0.1;

libs
(
);

otherOutputTime  $writeInterval;

functions
{
    HRR
    {
        type            volFieldValue;
        libs ("libfieldFunctionObjects.so");
        enabled         true;
        writeControl    timeStep;  //outputTime;
        writeInterval   50;
        log             false;     
        writeFields     false;
        regionType      all;       //cellZone;
        name            c0;
        operation       volIntegrate; 
        fields
        (
            Qdot
            dQFuel
            dQFstar
            Qdot_rad
        );
    }

    film
    {
        type surfaces;
        libs (sampling);
        enabled         true;
        writeControl   adjustableRunTime;
        writeInterval       $...otherOutputTime;
        interpolationScheme cellPoint;
        surfaceFormat vtk;
        region      filmRegion;
      
        fields
        (
            deltaf
        );

        surfaces
        (
            h2o
            {
                type       patch;
                patches    (region0_to_filmRegion_fuel);
                interpolate false;
            }
        );

    }

    box
    {
        type surfaces;
        libs (sampling);
        enabled         true;
        writeControl   adjustableRunTime;
        writeInterval       $...otherOutputTime;
        interpolationScheme cellPoint;
        surfaceFormat vtk;
        region      region0;
      
        fields
        (
            T
            convectiveHeatFlux_T
            qin
        );

        surfaces
        (
            box
            {
                type       patch;
                patches    (region0_to_fuelRegion_fuel);
                interpolate false;
            }
        );

    }
 
    fuel
    {
        type surfaces;
        libs (sampling);
        enabled         true;
        writeControl   adjustableRunTime;
        writeInterval       $...otherOutputTime;
        interpolationScheme cellPoint;
        surfaceFormat vtk;
        region      fuelRegion;
      
        fields
        (
            T
            v
        );

        surfaces
        (
            box
            {
                type       patch;
                patches    (region0_to_fuelRegion_fuel);
                interpolate false;
            }
        );

    }
   
    flame
    {
        type surfaces;
        libs (sampling);
        enabled         true;
        writeControl   adjustableRunTime;
        writeInterval       $...otherOutputTime;
        interpolationScheme cellPoint;
        surfaceFormat vtk;
        region      region0;

        // Fields to be sampled
        fields
        (
                T
        );

        surfaces
        (
            flame
            {
                type            isoSurfaceTopo;
                isoField        ft;
                isoValue        0.03;
                interpolate     true;
            }
        );
    }
    
    #include "vtkCloud"

    xyzPlanes
    {
        type surfaces;
   
        libs  (sampling);
        enabled             true;
        writeControl        adjustableRunTime;
        writeInterval       $...otherOutputTime;
        interpolationScheme cellPointFace;
        surfaceFormat       vtk;
     
        // Fields to be sampled
        fields
        (
            T
            U
            CH4
            Qdot
            O2
        );
   
        surfaces
        (
            verticalPlaneY
            {
                type cuttingPlane;
                planeType pointAndNormal;
                pointAndNormalDict
                {
                    point       (0 0 0.1);
                    normal    (0 1 0);
                }
                interpolate     true;
            }
   
  
        );
    }
}

// ************************************************************************* //
